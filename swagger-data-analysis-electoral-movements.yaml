swagger: "2.0"
info:
  description: "This API contains election data and movements such as the real time position of candidates, where they are meeting, daily voting trends, popularity of candidates on social networks and media in order to predict the political actions of other parties and carry out a successful political campaign."
  version: "1.0.0"
  title: "Data analysis and electoral movements"
  contact:
    email: "samtoche@outlook.fr"
host: "data-analysis-electoral-movements.sourcing.com"
basePath: "/v1.0.0"
tags:
- name: "movements_candidats"
  description: "This dataset contains the data sources that will be used to get information about the movements of the other candidates such as their position, events, meetings and actions in real time"
- name: "tendancy_votes"
  description: "This dataset contains the daily voting trend"
- name: "popularity_candidats"
  description: "This dataset contains the popularity of candidates in the media and on social networks"
schemes:
- "https"
- "http"
paths:
  /movements_candidats/position:
    get:
      tags:
      - "movements_candidats"
      summary: "Add a new pet to the store"
      description: ""
      operationId: "addPet"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Pet object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Candidat"
      responses:
        "405":
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    
  /movements_candidats/events:
    get:
      tags:
      - "movements_candidats"
      summary: "Finds Pets by status"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findPetsByStatus"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "status"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "available"
          - "pending"
          - "sold"
          default: "available"
        collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Candidat"
        "400":
          description: "Invalid status value"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /movements_candidats/meeting:
    get:
      tags:
      - "movements_candidats"
      summary: "Finds Pets by tags"
      description: "Muliple tags can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing."
      operationId: "findPetsByTags"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "tags"
        in: "query"
        description: "Tags to filter by"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Candidat"
        "400":
          description: "Invalid tag value"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
      deprecated: false

  /tendancy_votes:
    get:
      tags:
      - "tendancy_votes"
      summary: "Returns pet inventories by status"
      description: "Returns a map of status codes to quantities"
      operationId: "getInventory"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
      security:
      - api_key: []
  
  /popularity_candidats/on_media:
    get:
      tags:
      - "popularity_candidats"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/Candidat"
      responses:
        default:
          description: "successful operation"
  
  /popularity_candidats/on_social_network:
    get:
      tags:
      - "popularity_candidats"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithListInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/Candidat"
      responses:
        default:
          description: "successful operation"

securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "https://data-analysis-electoral-movements.sourcing.com"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
    
    
definitions:
  Candidat:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "integer"
        description: "name of candidat"
      position:
        type: "object"
        description: "position of candidat"
      popular:
        type: "string"
        description: "Popularity of candidat"
        enum:
        - "popular on media"
        - "popular on social network"
        - "unknown"
      vote_number:
        type: "integer"
        format: "int64"
      isWinnerAtNow:
        type: "boolean"
        default: false
    xml:
      name: "Candidat"
      
  Meeting_events:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      DateMeeting_event:
        type: "string"
        format: "date-time"
      place:
        type: "object"
        description: "place of meeting"
     
    xml:
      name: "Meeting_events"
 
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      a_type:
        type: "string"
        description: "Description of type'API Response"
      message:
        type: "string"
        description: "Message of API Response"
